/*
# This program was written by and is copyright Alec Muffett 1991,
# 1992, 1993, 1994, 1995, and 1996, and is provided as part of the
# Crack v5.0 Password Cracking package.
#
# The copyright holder disclaims all responsibility or liability with
# respect to its usage or its effect upon hardware or computer
# systems, and maintains copyright as set out in the "LICENCE"
# document which accompanies distributions of Crack v5.0 and upwards.
*/

#include "libcrack.h"
#include "../win_nt/crypt_nt.h"

/* this file implements the NT OWF for the (hopefully)
   platform-independent API for Crack version 5.0+ */

/* The value of PLAINTEXTSIZE for NT is 128 but the GUI limits it to
 * 14 characters (for compatability with the LANMAN version).
 * In theory someone could create a pasword longer than 14 characters
 * but they would not be able to use it to log in at the console.
 */

#define CIPHERTEXTSIZE  32
#define PLAINTEXTSIZE   14      /* must be <= MAXWORDLEN in libcrack.h */
#define SALTSIZE        0

static char private_salt[SALTSIZE + 1];

#undef CRYPT16

#define EBS             1024    /* BIG number - and why not ? */

/* boot hook */

int
elcid_init()
{
    return (0);
}

/* optimum/max number of words 'N' for elcid_test */

int
elcid_bsize()
{
    return (EBS);               /* arbitrary value reducing memfrag */
}

/* maximum valid length of a guess */

int
elcid_pwsize()
{
    return (PLAINTEXTSIZE);
}

int
elcid_mkcookies(ciphertexts, usernames, cookies, m)
char **ciphertexts;             /* vector of M ciphertexts */
char **usernames;               /* vector of M usernames */
void **cookies;                 /* vector to contain M cookies */
int m;                          /* M */
{
    while (m--)
    {
	cookies[m] = (void *) Clone(ciphertexts[m]);
    }
    return (0);
}

int
elcid_setup(ciphertexts, m)
char **ciphertexts;             /* vector of M ciphertexts */
int m;                          /* not used in this implementation */
{
    return (0);
}

int
elcid_invalid(ciphertext)       /* check validity of a ciphertext */
char *ciphertext;
{
    int i;
    int retval;
    static char validchars[] = "0123456789ABCDEFabcdef";

    if (strlen(ciphertext) < CIPHERTEXTSIZE)
    {
        return (-1);
    }

    retval = 0;

    for (i = 0; i < CIPHERTEXTSIZE && ciphertext[i]; i++)
    {
	if (!strchr(validchars, (int) ciphertext[i]))
	{
	    retval++;
	}
    }

    return (retval);
}

int
elcid_test(guesses, cookies, results, cookiecount)
char **guesses;                 /* vector of N guesses */
void **cookies;                 /* vector of M cookies */
char **results;                 /* vector of M results (guessed passwords) */
int cookiecount;                /* M */
{
    int i;
    int retval;

    /* clear the log */
    retval = 0;

    /* for each element in the "guesses" array */
    for (i = 0; (i < EBS) && guesses[i]; i++)
    {
	int j;
	char *cipher;

	/* encrypt it */
	cipher = (char *) crypt_nt(guesses[i], private_salt);

	/* and see if the encryption matches any of the cookies */
	for (j = 0; j < cookiecount; j++)
	{
	    /* skip, if there's no cookie, or it's been guessed */
	    if ((!cookies[j]) || results[j])
	    {
		continue;
	    }

	    /* compare, and clone the guessed word if correct */
	    if (!strncmp(cipher, (char *) cookies[j], CIPHERTEXTSIZE))
	    {
		results[j] = (char *) Clone(guesses[i]);
		retval++;
	    }
	}
    }

    return (retval);
}
