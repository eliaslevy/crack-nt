/*
# This program was written by and is copyright Alec Muffett 1991,
# 1992, 1993, 1994, 1995, and 1996, and is provided as part of the
# Crack v5.0 Password Cracking package.
#
# The copyright holder disclaims all responsibility or liability with
# respect to its usage or its effect upon hardware or computer
# systems, and maintains copyright as set out in the "LICENCE"
# document which accompanies distributions of Crack v5.0 and upwards.
*/

/*
 * LANMAN filter hack and raw_lanman() support by Aleph One
 */

#undef DEBUG

#include "libcrack.h"
#include "../libdes/des_locl.h"
#include "../win_nt/crypt_nt.h"

/* this file implements the LANMAN OWF for the (hopefully)
   platform-independent API for Crack version 5.0+ */

#define CIPHERTEXTSIZE  32
#define CTHS		(CIPHERTEXTSIZE / 2)
#define PLAINTEXTSIZE   14      /* must be <= MAXWORDLEN in libcrack.h */
#define PTHS		(PLAINTEXTSIZE / 2)
#define SALTSIZE        0

/*
 * We can filter out guesses before passing them to crypt if:
 *
 *	- We know the crypted password is longer than 7
 *	  characters and the guess isnt, and viceversa
 *	- We have guessed half of the password and the
 *	  guess does not match.
 *
 * This is a considerable gain if all the accounts you are cracking
 * are either shorter (inclusive) or longer than 7 characters, or
 * if you find partial guesses for all of them quickly.
 *
 * On the other hand if a single one of the passwords you are cracking
 * does not meet this requirements you will still have to encrypt the
 * guess plus you will incur the overhead of the filtering.
 *
 * Also, if you filter based on length you will loose some of the benefits
 * of trying to crack partial passwords as even if the guess is longer
 * or shorter than the actual password half of it may still match and
 * you need to encrypt the guess to compare each half.
 *
 * YMMV
 */
#undef LANMAN_FILTER

struct CookieDough {
    u_int64_t ct[2];
    u_int64_t pt[2];
};

#define EBS             1024    /* BIG number - and why not ? */

/* Magic number - null ciphertext */
#define NULL_CT 	868578240321282570LL

/* boot hook */

int
elcid_init()
{
    return (0);
}

/* optimum/max number of words 'N' for elcid_test */

int
elcid_bsize()
{
    return (EBS);               /* arbitrary value reducing memfrag */
}

/* maximum valid length of a guess */

int
elcid_pwsize()
{
    return (PLAINTEXTSIZE);
}

/* reverse last two DES rotations, FP(), l2c, and c2h */

int
elcid_mkcookies(ciphertexts, usernames, cookies, m)
char **ciphertexts;             /* vector of M ciphertexts */
char **usernames;               /* vector of M usernames */
void **cookies;                 /* vector to contain M cookies */
int m;                          /* M */
{
    struct CookieDough *cookie;

    while (m--)
    {
	register u_int32_t r, l;
	register u_int64_t ll;

        cookie = (struct CookieDough *) malloc(sizeof(struct CookieDough));

        if (cookie)
	{
            h2l(ciphertexts[m]    , l);
	    h2l(ciphertexts[m] + 8, r);
	    IP(l,r);
	    l = ROTATE(l,29)&0xffffffffL;
	    r = ROTATE(r,29)&0xffffffffL;
	    ll2ll(l,r,ll);
	    cookie->ct[0] = ll;
  	    l=r=ll=0;

	    h2l(ciphertexts[m] + 16, l);
	    h2l(ciphertexts[m] + 24, r);
	    IP(l,r);
	    l = ROTATE(l,29)&0xffffffffL;
	    r = ROTATE(r,29)&0xffffffffL;
	    ll2ll(l,r,ll);
	    cookie->ct[1] = ll;
	    l=r=ll=0;

	    cookie->pt[0] = 0;
	    cookie->pt[1] = 0;
	}

	cookies[m] = cookie;
    }
    return (0);
}

int
elcid_setup(ciphertexts, m)
char **ciphertexts;             /* vector of M ciphertexts */
int m;                          /* not used in this implementation */
{
    return (0);
}

int
elcid_invalid(ciphertext)       /* check validity of a ciphertext */
char *ciphertext;
{
    int i;
    int retval;
    static char validchars[] = "0123456789ABCDEFabcdef";

    if (strlen(ciphertext) < CIPHERTEXTSIZE)
    {
        return (-1);
    }

    retval = 0;

    for (i = 0; i < CIPHERTEXTSIZE && ciphertext[i]; i++)
    {
	if (!strchr(validchars, (int) ciphertext[i]))
	{
	    retval++;
	}
    }

    return (retval);
}

void des_finish(u_int64_t ll, u_char *c) {
	u_int32_t l,r;

        ll_from_ll(ll,l,r);

        l=ROTATE(l,3)&0xffffffffL;
        r=ROTATE(r,3)&0xffffffffL;

        FP(r,l);

	l2h(l,c);
	l2h(r,c+8);
}

/* 
 * The use of the Logger() function in this function breaks the modularity of
 * the ELCID API, but this is the only way for us to inform the user we
 * found a partial match as the API does not know of such a concept.
 */
int
elcid_test(guesses, cookies, results, cookiecount)
u_char **guesses;                 /* vector of N guesses */
void **cookies;                 /* vector of M cookies */
u_char **results;                 /* vector of M results (guessed passwords) */
int cookiecount;                /* M */
{
    register int i, j;
    int retval;
    int encryptit;
    u_int64_t ll2[2], g[2];
    u_char tmpstr[17], *c;
    struct CookieDough *cookie;

    /* clear the log */
    retval = 0;

    cookie = NULL;

    /* for each element in the "guesses" array */
    for (i = 0; (i < EBS) && guesses[i]; i++)
    {
	/*
	 * Convert the guess to two 64 bit integers.
	 * This will speed up the test for partial gueses.
	 * But is it worth it?
	 */
	memset(tmpstr,0,16);
	memcpy(tmpstr,guesses[i],14);
	c = tmpstr;

	p2ll(c,g[0]);
	p2ll(c,g[1]);

#ifdef LANMAN_FILTER

	/* try to filter it */
	encryptit = 0;
	for (j = 0; j < cookiecount; j++)
	{
	    /* skip, if there's no cookie, or it's been guessed */
	    if ((!cookies[j]) || results[j])
		continue;

	    cookie = (struct CookieDough *) cookies[j];

	    /* skip, if the guess is longer than 7 characters */
	    /* and the password isnt, and viceversa */
	    if (((g[1] == 0) && (cookie->ct[1] != NULL_CT)) ||
		((g[1] != 0) && (cookie->ct[1] == NULL_CT)))
		continue;

	    /* skip, if the are partials and they dont match */
	    if ((cookie->pt[0] && (g[0] != cookie->pt[0])) ||
	        (cookie->pt[1] && (g[1] != cookie->pt[1])))
		continue;

	    encryptit = 1;
            break;
	}

	if (!encryptit) {
#ifdef DEBUG
	    Logger('X', "Not encrypting\n");
#endif /* DEBUG */
	    return (retval);
	}
#endif /* LANMAN_FILTER */

	/* encrypt it */
	raw_lanman(guesses[i], ll2);

	/* and see if the encryption matches any of the cookies */
	for (j = 0; j < cookiecount; j++)
	{
	    /* skip, if there's no cookie, or it's been guessed */
	    if ((!cookies[j]) || results[j])
		continue;

	    cookie = (struct CookieDough *) cookies[j];

	    /* compare, and clone the guessed word if correct */
            if ((ll2[0] == cookie->ct[0]) && (ll2[1] == cookie->ct[1]))
	    {
		results[j] = (u_char *) Clone(guesses[i]);
		retval++;
	    }
	    else
	    {
		/* compare, the two halfs for a partial match */
		if (!cookie->pt[0] && (ll2[0] == cookie->ct[0]))
		{
		    cookie->pt[0] = g[0];
		    c = tmpstr;
		    des_finish(cookie->ct[0], c);
		    Logger('P', "%.16s:%.7s\n", tmpstr, guesses[i]);
		}
		
		if (!cookie->pt[1] && (ll2[0] == cookie->ct[1]))
		{
		    cookie->pt[1] = g[0];
		    c = tmpstr;
		    des_finish(cookie->ct[1], c);
		    Logger('P', "%.16s:%.7s\n", tmpstr, guesses[i]);
		}

		if (g[1])
		{
		    if (!cookie->pt[0] && (ll2[1] == cookie->ct[0]))
		    {
			cookie->pt[0] = g[1];
			c = tmpstr;
			des_finish(cookie->ct[0], c);
			Logger('P',"%.16s:%.7s\n",tmpstr,guesses[i]+PTHS);
		    }

		    if (!cookie->pt[1] && (ll2[1] == cookie->ct[1]))
		    {
			cookie->pt[1] = g[1];
			c = tmpstr;
			des_finish(cookie->ct[1], c);
			Logger('P',"%.16s:%.7s\n",tmpstr, guesses[i]+PTHS);
		    }
		}

		if ( cookie->pt[0] &&
		    (cookie->pt[1] || (cookie->ct[1] == NULL_CT)))
		{
		    c = tmpstr;
		    ll2p(cookie->pt[0],c);
		    ll2p(cookie->pt[1],c);
		    tmpstr[14] = 0;
		    results[j] = Clone(tmpstr);
		    retval++;
#ifdef DEBUG
		    Logger('X', "Found the password: \"%.14s\" \"%.14s\"\n", results[j], tmpstr);
#endif 
		}
	    }
	}
    }

    return (retval);
}
