/*
# This program was written by and is copyright Alec Muffett 1991,
# 1992, 1993, 1994, 1995, and 1996, and is provided as part of the
# Crack v5.0 Password Cracking package.
#
# The copyright holder disclaims all responsibility or liability with
# respect to its usage or its effect upon hardware or computer
# systems, and maintains copyright as set out in the "LICENCE"
# document which accompanies distributions of Crack v5.0 and upwards.
*/

#include "libcrack.h"
#include "../win_nt/crypt_nt.h"


/* this file implements the LANMAN OWF for the (hopefully)
   platform-independent API for Crack version 5.0+ */

#define CIPHERTEXTSIZE  32
#define CTHS		(CIPHERTEXTSIZE / 2)
#define PLAINTEXTSIZE   14      /* must be <= MAXWORDLEN in libcrack.h */
#define PTHS		(PLAINTEXTSIZE / 2)
#define SALTSIZE        0

/*
 * We can filter out guesses before passing them to crypt if:
 *
 *	- We know the crypted password is longer than 7
 *	  characters and the guess isnt, and viceversa
 *	- We have guessed half of the password and the
 *	  guess does not match.
 *
 * This is a considerable gain if all the accounts you are cracking
 * are either shorter (inclusive) or longer than 7 characters, or
 * if you find partials guesses for all of them quickly.
 *
 * On the other hand if a single one of the accounts you are cracking
 * does not meet this requirements you will still have to encrypt the
 * guess plus you will incur the overhead of the filtering.
 *
 * YMMV
 */
#undef LANMAN_FILTER

struct CookieDough {
    char cipher[CIPHERTEXTSIZE +1];
    char first_half[PTHS + 1];
    char second_half[PTHS + 1];
};

#define EBS             1024    /* BIG number - and why not ? */


/* boot hook */

int
elcid_init()
{
    return (0);
}

/* optimum/max number of words 'N' for elcid_test */

int
elcid_bsize()
{
    return (EBS);               /* arbitrary value reducing memfrag */
}

/* maximum valid length of a guess */

int
elcid_pwsize()
{
    return (PLAINTEXTSIZE);
}

int
elcid_mkcookies(ciphertexts, usernames, cookies, m)
char **ciphertexts;             /* vector of M ciphertexts */
char **usernames;               /* vector of M usernames */
void **cookies;                 /* vector to contain M cookies */
int m;                          /* M */
{
    struct CookieDough *cookie;

    while (m--)
    {
	/* cipher + half + guess + null, yeah I know its a waste of memory */
        cookie = (struct CookieDough *) malloc(sizeof(struct CookieDough));

        if (cookie)
	{
	    memset(cookie->cipher, 0, CIPHERTEXTSIZE + 1);
	    strncpy(cookie->cipher, ciphertexts[m], CIPHERTEXTSIZE);
	    memset(cookie->first_half, 0, PTHS + 1);
	    memset(cookie->second_half, 0, PTHS + 1);
	}

	cookies[m] = cookie;
    }
    return (0);
}

int
elcid_setup(ciphertexts, m)
char **ciphertexts;             /* vector of M ciphertexts */
int m;                          /* not used in this implementation */
{
    return (0);
}

int
elcid_invalid(ciphertext)       /* check validity of a ciphertext */
char *ciphertext;
{
    int i;
    int retval;
    static char validchars[] = "0123456789ABCDEFabcdef";

    if (strlen(ciphertext) < CIPHERTEXTSIZE)
    {
        return (-1);
    }

    retval = 0;

    for (i = 0; i < CIPHERTEXTSIZE && ciphertext[i]; i++)
    {
	if (!strchr(validchars, (int) ciphertext[i]))
	{
	    retval++;
	}
    }

    return (retval);
}

/* 
 * The use of the Logger() function in this function breaks the modularity of
 * the ELCID API, but this is the only way for us to inform the user we
 * found a partial match as the API does not know of such a concept.
 */
int
elcid_test(guesses, cookies, results, cookiecount)
char **guesses;                 /* vector of N guesses */
void **cookies;                 /* vector of M cookies */
char **results;                 /* vector of M results (guessed passwords) */
int cookiecount;                /* M */
{
    int i;
    int guesslen;
    int seven_or_less;
    int retval;
    int encryptit;
    struct CookieDough *cookie;

    /* clear the log */
    retval = 0;

    cookie = NULL;

    /* for each element in the "guesses" array */
    for (i = 0; (i < EBS) && guesses[i]; i++)
    {
	int j;
	char *cipher;

#ifdef LANMAN_FILTER
	/* try to filter it */
	encryptit = 0;
	for (j = 0; j < cookiecount; j++)
	{
	    /* skip, if there's no cookie, or it's been guessed */
	    if ((!cookies[j]) || results[j])
		continue;

            cookie = (struct CookieDough *) cookies[j];

	    /* skip, if the guess is longer than 7 characters */
	    /* and the password isnt, and viceversa */
            guesslen = strlen(guesses[i]);
	    seven_or_less = !strncmp(cookie->cipher+CTHS, "AAD3B435B51404EE", CTHS);
	    if ( ((guesslen > PTHS) && seven_or_less) ||
		    ((guesslen <= PTHS) && !seven_or_less))
		continue;
	    cookie = (struct CookieDough *) cookies[j];

	    /* skip, if the are partials and they dont match */
	    if ( (cookie->first_half[0] != 0) &&
		    (strncmp(cookie->first_half, guesses[i], PTHS)) )
		continue;
	    if ( (cookie->second_half[0] != 0) &&
		    (strncmp(cookie->second_half, guesses[i], PTHS)) )
		continue;

	    encryptit = 1;
            break;
	}

	if (!encryptit) {
#ifdef DEBUG
	    Logger('X', "Not encrypting\n");
#endif /* DEBUG */
	    return (retval);
	}
#endif /* LANMAN_FILTER */

	/* encrypt it */
	cipher = (char *) crypt_lanman(guesses[i], NULL);

	/* and see if the encryption matches any of the cookies */
	for (j = 0; j < cookiecount; j++)
	{
	    /* skip, if there's no cookie, or it's been guessed */
	    if ((!cookies[j]) || results[j])
	    {
		continue;
	    }

	    cookie = (struct CookieDough *) cookies[j];

	    /* compare, and clone the guessed word if correct */
	    if (!strncmp(cipher, (char *) cookie->cipher, CIPHERTEXTSIZE))
	    {
		results[j] = (char *) Clone(guesses[i]);
		retval++;
	    }
	    else
	    {
		/* compare, the two halfs for a partial match */
		if (!strncmp(cipher, (char *) cookie->cipher, CTHS))
		{
		    if (cookie->first_half[0] != 0)
                      continue;

                    strncpy(cookie->first_half, guesses[i], PTHS);

		    Logger('P', "%.16s:=%.7s\n", cipher, guesses[i]);

		}
		
		if (!strncmp(cipher, (char *) cookie->cipher+CTHS, CTHS))
		{
		    if (cookie->second_half[0] != 0)
			continue;

		    strncpy(cookie->second_half, guesses[i], PTHS);

		    Logger('P', "%.16s:=%.7s\n", cipher, guesses[i]);
		}

		if (strlen(guesses[i]) > PTHS)
		{
		    if (!strncmp(cipher+CTHS, (char *) cookie->cipher, CTHS))
		    {
			if (cookie->first_half[0] != 0)
			   continue;

			strncpy(cookie->first_half, guesses[i]+PTHS, PTHS);

			Logger('P', "%.16s:%.7s\n",
				cipher+16, guesses[i]+PTHS);
		    }

		    if (!strncmp(cipher+CTHS, (char *) cookie->cipher+CTHS, CTHS))
		    {
			if (cookie->second_half[0]  != 0)
			    continue;

			strncpy(cookie->second_half, guesses[i]+PTHS, PTHS);

			Logger('P', "%.16s:%.7s\n",
				cipher+16, guesses[i]+7);
		    }
		}

		if ((cookie->first_half[0] != 0) && (cookie->second_half[0] != 0))
		{
		    results[j] = (char *) malloc(PLAINTEXTSIZE + 1);

		    if (results[j])
		    {
			memset(results[j], 0, PLAINTEXTSIZE + 1);
			strncpy(results[j], cookie->first_half, PTHS);
			strncpy(results[j] + PTHS, cookie->second_half, PTHS);

		    	retval++;
#ifdef DEBUG
		    	Logger('D', "Found the password: %s%s\n",
				cookie->first_half, cookie->second_half);
#endif /* DEBUG */
		    }
		}

	    }
	}
    }

    return (retval);
}
